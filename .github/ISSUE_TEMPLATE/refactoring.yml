name: 🔧 리팩토링 이슈
description: 코드 리팩토링 및 기술 부채 해결 관련 이슈
labels: [refactoring, technical-debt, backend]
body:
  - type: markdown
    attributes:
      value: |
        ## 리팩토링 이슈
        코드 품질 개선과 기술 부채 해결을 위한 리팩토링 이슈입니다.
        
  - type: textarea
    id: current-state
    attributes:
      label: 현재 상태
      description: 리팩토링이 필요한 코드의 현재 상태를 설명해주세요
      placeholder: |
        - 현재 코드의 문제점
        - 해당 코드 위치 (파일 경로, 클래스/메서드명)
        - 현재 구현 방식의 단점
    validations:
      required: true
      
  - type: textarea
    id: proposed-changes
    attributes:
      label: 제안하는 변경사항
      description: 어떻게 리팩토링할 것인지 설명해주세요
      placeholder: |
        - 구체적인 리팩토링 방안
        - 적용할 디자인 패턴/아키텍처
        - 코드 예시 (있다면)
    validations:
      required: true
      
  - type: textarea
    id: benefits
    attributes:
      label: 기대 효과
      description: 이 리팩토링으로 얻을 수 있는 이점을 설명해주세요
      placeholder: |
        - 코드 가독성 향상
        - 유지보수성 개선
        - 성능 향상 (구체적인 수치 예상)
        - 확장성 개선
    validations:
      required: true
      
  - type: dropdown
    id: refactoring-scope
    attributes:
      label: 리팩토링 범위
      description: 리팩토링의 범위를 선택해주세요
      options:
        - 메서드 수준 (단일 또는 소수 메서드)
        - 클래스 수준 (단일 또는 소수 클래스)
        - 모듈 수준 (여러 관련 클래스)
        - 서비스 수준 (전체 서비스 구조)
        - 아키텍처 수준 (시스템 아키텍처 변경)
    validations:
      required: true
      
  - type: dropdown
    id: breaking-changes
    attributes:
      label: 하위 호환성 영향
      description: 이 리팩토링이 API 하위 호환성에 영향을 주나요?
      options:
        - 있음 (API 변경 필요)
        - 없음 (내부 구현만 변경)
    validations:
      required: true
      
  - type: textarea
    id: breaking-changes-detail
    attributes:
      label: 하위 호환성 영향 상세
      description: 하위 호환성에 영향이 있다면 상세히 설명해주세요
      placeholder: |
        - 변경되는 API 명세
        - 마이그레이션 가이드
        - 클라이언트측 변경 필요사항
      
  - type: dropdown
    id: test-strategy
    attributes:
      label: 테스트 전략
      description: 리팩토링의 안전성을 검증할 테스트 전략을 선택해주세요
      options:
        - 기존 테스트 활용 (충분한 테스트 커버리지 있음)
        - 새 테스트 추가 필요 (기존 테스트 불충분)
        - 전체 테스트 재작성 필요
    validations:
      required: true
      
  - type: textarea
    id: implementation-plan
    attributes:
      label: 구현 계획
      description: 리팩토링을 어떻게 단계적으로 진행할지 설명해주세요
      placeholder: |
        1. 우선 테스트 커버리지 확보
        2. 클래스 A를 인터페이스로 추출
        3. 새 구현체 개발
        4. 점진적으로 의존성 전환
        5. 레거시 코드 제거
      render: markdown
      
  - type: dropdown
    id: priority
    attributes:
      label: 우선순위
      description: 이 리팩토링의 우선순위를 선택해주세요
      options:
        - Critical (심각한 기술 부채/성능 이슈)
        - High (중요한 코드 품질 문제)
        - Medium (개선이 필요하지만 긴급하지 않음)
        - Low (여유 있을 때 개선)
    validations:
      required: true
      
  - type: dropdown
    id: affected-components
    attributes:
      label: 영향 받는 컴포넌트
      description: 이 리팩토링이 영향을 미치는 컴포넌트를 선택해주세요
      options:
        - 결제 처리
        - 계정 관리
        - 인증/보안
        - 데이터 접근 계층
        - 비즈니스 로직 계층
        - API 계층
        - 외부 시스템 연동
        - 기타
      multiple: true
    validations:
      required: true
      
  - type: textarea
    id: additional-context
    attributes:
      label: 추가 컨텍스트
      description: 리팩토링에 관련된 추가적인 정보나 참고 자료가 있다면 작성해주세요
      placeholder: |
        - 레퍼런스 아티클
        - 관련 디자인 패턴 문서
        - 비슷한 사례